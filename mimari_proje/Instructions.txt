R-type komutlar

Binary	 : 000000 sssss 00000 00000 00000 001000
Komut 	 : jr rs
Açýklama : Rs registerýndaki adrese dallan
RTL      : PC <- Reg(Rs);

Binary   : 000000 sssss 00000 ddddd 00000 001001
Komut    : jalr rd, rs
Açýklama : Bir sonraki komutun adresini Rd adresindeki registerda sakla. Rs registerýnda bulunan adrese dallan.
RTL      : Reg(Rd) <- PC + 4;
           PC <- Reg(Rs);
           
Binary   : 000000 sssss 00000 00000 00000 010100
Komut    : brz rs
Açýklama : Z = 1 ise Rs adresindeki registera dallan.
RTL      : if (Z = 1) {
              PC <- Reg(Rs);
           }
           else {
              PC <- PC + 4;
           }
           
Binary   : 000000 sssss 00000 00000 00000 010101
Komut    : brn rs
Açýklama : Z = 0 ise Rs adresindeki registera dallan.
RTL      : if (Z = 0) {
              PC <- Reg(Rs);
           }
           else {
              PC <- PC + 4;
           }
           
Binary   : 000000 sssss 00000 ddddd 00000 010110
Komut    : balrz rs, rd
Açýklama : Z = 1 ise bir sonraki komutun adresini Rd adresindeki registerda sakla Rs registerýnda bulunan adrese dallan.
RTL      : if (Z = 1) {
              Reg(Rd) <- PC + 4;
              PC <- Reg(Rs);
           }
           else {
              PC <- PC + 4;
           }

Binary   : 000000 sssss 00000 ddddd 00000 010111
Komut    : balrn $rs, $rd
Açýklama : Z = 0 ise bir sonraki komutun adresini Rd adresindeki registerda sakla Rs registerýnda bulunan adrese dallan.
RTL      : if (Z = 0) {
              Reg(Rd) <- PC + 4;
              PC <- Reg(Rs);
           }
           else {
              PC <- PC + 4;
           }

Binary   : 000000 sssss ttttt ddddd 00000 100000
Komut    : add rd, rs, rt
Açýklama : rs adresindeki register ile rt adresindeki registerý topla sonucu rd adresindeki registera yaz.
RTL      : if(is_not_overflow) {
			 Reg(Rd) <- Reg(Rs) + Reg(Rt);
           }
           PC <- PC + 4;

Binary   : 000000 sssss ttttt ddddd 00000 100010
Komut    : sub rd, rs, rt
Açýklama : rs adresindeki register ile rt adresindeki registerý birbirinden çýkar sonucu rd adresindeki registera yaz.
RTL      : if(is_not_overflow) {
			 Reg(Rd) <- Reg(Rs) - Reg(Rt);
           }
           PC <- PC + 4;

Binary   : 000000 sssss ttttt ddddd 00000 100100
Komut    : and rd, rs, rt
Açýklama : rs adresindeki register ile rt adresindeki registerý and le rd adresindeki registera yaz.
RTL      : Reg(Rd) <- Reg(Rs) and Reg(Rt);
		   PC <- PC + 4;

Binary   : 000000 sssss ttttt ddddd 00000 100101
Komut    : or rd, rs, rt
Açýklama : rs adresindeki register ile rt adresindeki registerý or la rd adresindeki registera yaz.
RTL      : Reg(Rd) <- Reg(Rs) or Reg(Rt);
		   PC <- PC + 4;

Binary   : 000000 sssss ttttt ddddd 00000 100111
Komut    : nor rd, rs, rt
Açýklama : rs adresindeki register ile rt adresindeki registerý nor la rd adresindeki registera yaz.
RTL      : Reg(Rd) <- Reg(Rs) nor Reg(Rt);
		   PC <- PC + 4;

Binary   : 000000 sssss ttttt ddddd 00000 101010
Komut    : slt rd, rs, rt
Açýklama : Rs adresindeki registerýn deðeri Rt den küçükse Rd 1 olsun. Deðilse 0 olsun.
RTL      : Rd <= Reg(Rs) < Reg(Rt) ? 1 : 0;
           PC <- PC + 4;


I-type komutlar

Binary	 : 000100 sssss ttttt iiii iiii iiii iiii
Komut 	 : beq Rs, Rt, imm16
RTL      : if(Reg(Rs) = Reg(Rt)) {
                PC <- PC + 4 + 4×sign_ext(imm16);
           }
           else {
                PC <- PC + 4;
           }       

Binary	 : 000101 sssss ttttt iiii iiii iiii iiii
Komut 	 : bne Rs, Rt, imm16
RTL      : if(Reg(Rs) != Reg(Rt)) {
                PC <- PC + 4 + 4×sign_ext(imm16);
           }
           else {
                PC <- PC + 4;
           }

Binary	 : 001000 sssss ttttt iiii iiii iiii iiii
Komut 	 : addi Rs, Rt, imm16
RTL      : if(is_not_overflow) {
			 Reg(Rt) <- Reg(Rs) + sign_extend(imm16);
           }
           PC <- PC + 4;

Binary	 : 001100 sssss ttttt iiii iiii iiii iiii
Komut 	 : andi Rs, Rt, imm16 
RTL      : Reg(Rt) <- Reg(Rs) and sign_extend(imm16);
		   PC <- PC + 4;

Binary	 : 001101 sssss ttttt iiii iiii iiii iiii
Komut 	 : ori Rs, Rt, imm16
RTL      : Reg(Rt) <- Reg(Rs) or sign_extend(imm16);
		   PC <- PC + 4;

Binary	 : 010010 sssss ttttt iiii iiii iiii iiii
Komut 	 : jm imm16(Rs)
RTL      : PC <- MEM(Reg(Rs) + sign_extend(imm16));

Binary	 : 010011 sssss ttttt iiii iiii iiii iiii
Komut 	 : jalm Rt, imm16(Rs) 
RTL      : Reg(Rt) <- PC + 4;
           PC <- MEM(Reg(Rs) + sign_extend(imm16));

Binary	 : 010100 sssss ttttt iiii iiii iiii iiii
Komut 	 : bmz imm16(Rs)
RTL      : if(Z = 1) {
				PC <- MEM(Reg(Rs) + sign_extend(imm16));
           }
           else {
                PC <- PC + 4;
           }

Binary	 : 010101 sssss ttttt iiii iiii iiii iiii
Komut 	 : bmn imm16(Rs)
RTL      : if(Z = 0) {
				PC <- MEM(Reg(Rs) + sign_extend(imm16));
           }
           else {
                PC <- PC + 4;
           }

Binary	 : 010110 sssss ttttt iiii iiii iiii iiii
Komut 	 : balmz Rt, imm16(Rs)
RTL      : if(Z = 1) {
				Reg(Rt) <- PC + 4;
				PC <- MEM(Reg(Rs) + sign_extend(imm16));
           }
           else {
                PC <- PC + 4;
           }

Binary	 : 010111 sssss ttttt iiii iiii iiii iiii
Komut 	 : balmn Rt, imm16(Rs) 
RTL      : if(Z = 0) {
				Reg(Rt) <- PC + 4;
				PC <- MEM(Reg(Rs) + sign_extend(imm16));
           }
           else {
                PC <- PC + 4;
           }

Binary	 : 011110 sssss ttttt iiii iiii iiii iiii
Komut 	 : jpc imm16
RTL      : PC <- PC + 4 + 4×sign_ext(imm16);

Binary	 : 011111 sssss ttttt iiii iiii iiii iiii
Komut 	 : jalpc Rt, imm16 
RTL      : Reg(Rt) <- PC + 4;
           PC <- PC + 4 + 4×sign_ext(imm16);

Binary	 : 100011 sssss ttttt iiii iiii iiii iiii
Komut 	 : lw Rt, imm16(Rs)
RTL      : Reg(Rt) <- MEM(Reg(Rs) + sign_extend(imm16));
           PC <- PC + 4;

Binary	 : 101011 sssss ttttt iiii iiii iiii iiii
Komut 	 : sw Rt, imm16(Rs) 
RTL      : MEM(Reg(Rs) + sign_extend(imm16)) <- Reg(Rt);
		   PC <- PC + 4;


J-type komutlar


Binary	 : 000010 iiiiiiiiiiiiiiiiiiiiiiiiii
Komut 	 : j label
Açýklama : label ýn adresine dallan
RTL      : PC <- PC[31:28] || Imm26 ||  00;

Binary	 : 000011 iiiiiiiiiiiiiiiiiiiiiiiiii
Komut 	 : jal label
Açýklama : bir sonraki komutun adresini $ra registerýnda sakla ve label ýn adresine dallan
RTL      : Reg(31) <- PC + 4;
		   PC <- PC[31:28] || Imm26 ||  00;
	
Binary	 : 011000 iiiiiiiiiiiiiiiiiiiiiiiiii
Komut 	 : bz label
Açýklama : z = 1 ise label ýn adresine dallan
RTL      : if(Z = 1) {
           		PC <- PC[31:28] || Imm26 ||  00;
           }
           else {
           		PC <- PC + 4;
           }

Binary	 : 011001 iiiiiiiiiiiiiiiiiiiiiiiiii
Komut 	 : bn label
Açýklama : z = 0 ise label ýn adresine dallan
RTL      : if(Z = 0) {
           		PC <- PC[31:28] || Imm26 ||  00;
           }
           else {
           		PC <- PC + 4;
           }
           
Binary	 : 011010 iiiiiiiiiiiiiiiiiiiiiiiiii
Komut 	 : balz label
Açýklama : z = 1 ise bir sonraki komutun adresini $ra registerýnda sakla ve label ýn adresine dallan
RTL      : if(Z = 1) {
           		Reg(31) <- PC + 4;
		   		PC <- PC[31:28] || Imm26 ||  00;
           }
           else {
           		PC <- PC + 4;
           }
           
Binary	 : 011011 iiiiiiiiiiiiiiiiiiiiiiiiii
Komut 	 : baln label
Açýklama : z = 0 ise bir sonraki komutun adresini $ra registerýnda sakla ve label ýn adresine dallan
RTL      : if(Z = 0) {
           		Reg(31) <- PC + 4;
		   		PC <- PC[31:28] || Imm26 ||  00;
           }    
           else {
           		PC <- PC + 4;
           }          
            
           
           
           




