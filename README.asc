== R-type komutlar


.JR komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss 00000 00000 00000 001000
| **Komut**     |  jr Rs
| **Açıklama**  |  Rs registerındaki adrese dallan
| **RTL**       |  PC <- Reg(Rs);
|====================


.JALR komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss 00000 ddddd 00000 001001
| **Komut**     |  jalr Rd, Rs
| **Açıklama**  |  Bir sonraki komutun adresini Rd adresindeki registerda                       sakla. Rs registerında bulunan adrese dallan.
| **RTL**       |  Reg(Rd) <- PC + 4; +
                   PC <- Reg(Rs);
|====================

.BRZ komutu
[width="100%",options="footer"]
|====================
| **Binary**    | 000000 sssss 00000 00000 00000 010100 
| **Komut**     | brz Rs 
| **Açıklama**  | Z = 1 ise Rs adresindeki registera dallan. 
| **RTL**       | if (Z = 1) { + 
                      PC <- Reg(Rs); + 
                  } + 
                  else { + 
                      PC <- PC + 4; +
                  } 
|====================

.BRN komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss 00000 00000 00000 010101
| **Komut**     |  brn Rs
| **Açıklama**  |  Z = 0 ise Rs adresindeki registera dallan.
| **RTL**       |  if (Z = 0) { + 
                        PC <- Reg(Rs); + 
                   } + 
                   else { + 
                       PC <- PC + 4; +
                   }
|====================

.BALRZ komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss 00000 ddddd 00000 010110
| **Komut**     |  balrz Rs, Rd
| **Açıklama**  |  Z = 1 ise bir sonraki komutun adresini Rd adresindeki                          registerda sakla Rs registerında bulunan adrese dallan.
| **RTL**       |  if (Z = 1) { + 
                     Reg(Rd) <- PC + 4; +
              PC <- Reg(Rs); +
           } +
           else { +
              PC <- PC + 4; +
           }
|==================== 





.BALRN komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss 00000 ddddd 00000 010111
| **Komut**     |  balrn Rs, Rd
| **Açıklama**  |  Z = 0 ise bir sonraki komutun adresini Rd adresindeki registerda sakla Rs registerında bulunan adrese dallan.
| **RTL**       |  if (Z = 0) { +
                   Reg(Rd) <- PC + 4; +
                   PC <- Reg(Rs); +
                   } +
                  else { +
                     PC <- PC + 4; +
                 }
|====================

.ADD komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss ttttt ddddd 00000 100000
| **Komut**     |  add Rd, Rs, Rt
| **Açıklama**  |  rs adresindeki register ile rt adresindeki registerı topla sonucu rd adresindeki registera yaz.
| **RTL**       |  if(is_not_overflow) { +
			 Reg(Rd) <- Reg(Rs) + Reg(Rt); +
           } +
           PC <- PC + 4; +
|====================

.SUB komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss ttttt ddddd 00000 100010
| **Komut**     |  sub Rd, Rs, Rt
| **Açıklama**  |  rs adresindeki register ile rt adresindeki registerı birbirinden çıkar sonucu rd adresindeki registera yaz
| **RTL**       |  if(is_not_overflow) { +
			 Reg(Rd) <- Reg(Rs) - Reg(Rt); +
           } +
           PC <- PC + 4; +
|====================

.AND komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss ttttt ddddd 00000 100100
| **Komut**     |  and Rd, Rs, Rt
| **Açıklama**  |  rs adresindeki register ile rt adresindeki registerı and le rd adresindeki registera yaz.
| **RTL**       |  Reg(Rd) <- Reg(Rs) and Reg(Rt); + 
		   PC <- PC + 4; +
|====================

.OR komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss ttttt ddddd 00000 100101
| **Komut**     |  or Rd, Rs, Rt
| **Açıklama**  |  rs adresindeki register ile rt adresindeki registerı or la rd adresindeki registera yaz.
| **RTL**       |  Reg(Rd) <- Reg(Rs) or Reg(Rt); + 
		   PC <- PC + 4; +
|====================

.NOR komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss ttttt ddddd 00000 100111
| **Komut**     |  nor Rd, Rs, Rt
| **Açıklama**  |  rs adresindeki register ile rt adresindeki registerı nor la rd adresindeki registera yaz.
| **RTL**       |  Reg(Rd) <- Reg(Rs) nor Reg(Rt); + 
		   PC <- PC + 4; +
|====================

.SLT komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000000 sssss ttttt ddddd 00000 101010
| **Komut**     |  slt Rd, Rs, Rt
| **Açıklama**  |  Rs adresindeki registerın değeri Rt den küçükse Rd 1 olsun. Değilse 0 olsun.
| **RTL**       |  Rd <= Reg(Rs) < Reg(Rt) ? 1 : 0; +
           PC <- PC + 4; +
|====================





== I-type komutlar

.BEQ komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000100 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  beq Rs, Rt, imm16
| **RTL**       | if(Reg(Rs) = Reg(Rt)) { + 
                PC <- PC + 4 + 4×sign_ext(imm16); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           } 
|====================


.BNE komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000101 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  bne Rs, Rt, imm16
| **RTL**       | if(Reg(Rs) != Reg(Rt)) { + 
                PC <- PC + 4 + 4×sign_ext(imm16); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           } 
|====================

.ADDI komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  001000 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  addi Rs, Rt, imm16
| **RTL**       |  if(is_not_overflow) { + 
			 Reg(Rt) <- Reg(Rs) + sign_extend(imm16); + 
           } + 
           PC <- PC + 4;
|====================

.ANDI komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  001100 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  andi Rs, Rt, imm16
| **RTL**       |  Reg(Rt) <- Reg(Rs) and sign_extend(imm16); + 
		   PC <- PC + 4; + 
|====================

.ORI komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  001101 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  ori Rs, Rt, imm16
| **RTL**       |  Reg(Rt) <- Reg(Rs) or sign_extend(imm16); + 
		   PC <- PC + 4;
|====================

.JM komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  010010 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  jm imm16(Rs)
| **RTL**       |  PC <- MEM(Reg(Rs) + sign_extend(imm16));
|====================

.JALM komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  010011 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  jalm Rt, imm16(Rs) 
| **RTL**       |  Reg(Rt) <- PC + 4; + 
           PC <- MEM(Reg(Rs) + sign_extend(imm16));
|====================

.BMZ komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  010100 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  bmz imm16(Rs) 
| **RTL**       |  if(Z = 1) { + 
				PC <- MEM(Reg(Rs) + sign_extend(imm16)); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           }
|====================

.BMN komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  010101 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  bmn imm16(Rs)
| **RTL**       |  if(Z = 0) { + 
				PC <- MEM(Reg(Rs) + sign_extend(imm16)); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           }
|====================

.BALMZ komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  010110 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  balmz Rt, imm16(Rs)
| **RTL**       |  if(Z = 1) { + 
				Reg(Rt) <- PC + 4; + 
				PC <- MEM(Reg(Rs) + sign_extend(imm16)); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           }
|====================

.BALMN komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  010111 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  balmn Rt, imm16(Rs)
| **RTL**       |  if(Z = 0) { + 
				Reg(Rt) <- PC + 4; + 
				PC <- MEM(Reg(Rs) + sign_extend(imm16)); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           }
|====================

.JPC komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  011110 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  jpc imm16
| **RTL**       |  PC <- PC + 4 + 4×sign_ext(imm16);
|====================

.JALPC komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  011111 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  jalpc Rt, imm16
| **RTL**       |  Reg(Rt) <- PC + 4; + 
           PC <- PC + 4 + 4×sign_ext(imm16);
|====================

.LW komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  100011 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  lw Rt, imm16(Rs)
| **RTL**       |  Reg(Rt) <- MEM(Reg(Rs) + sign_extend(imm16)); + 
           PC <- PC + 4;
|====================

.SW komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  101011 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  sw Rt, imm16(Rs)
| **RTL**       |  MEM(Reg(Rs) + sign_extend(imm16)) <- Reg(Rt); + 
		   PC <- PC + 4; + 
|====================

.BEQAL komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  101100 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  beqal Rs, Rt, imm16  
| **RTL**       |  if(Reg(Rs) = Reg(Rt)) { + 
                Reg(31) <- PC + 4; + 
                PC <- PC + 4 + 4×sign_ext(imm16); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           } 
|====================

.BNEAL komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  101101 sssss ttttt iiiiiiiiiiiiiiii
| **Komut**     |  bneal Rs, Rt, imm16  
| **RTL**       |  if(Reg(Rs) != Reg(Rt)) { + 
                Reg(31) <- PC + 4; + 
                PC <- PC + 4 + 4×sign_ext(imm16); + 
           } + 
           else { + 
                PC <- PC + 4; + 
           } 
|====================



== J-type komutlar

.J komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000010 iiiiiiiiiiiiiiiiiiiiiiiiii
| **Komut**     |  j label
| **Açıklama**  |  label ın adresine dallan
| **RTL**       |  PC <- PC[31:28] \|\| Imm26 \|\|  00;
|====================

.JAL komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  000011 iiiiiiiiiiiiiiiiiiiiiiiiii
| **Komut**     |  jal label
| **Açıklama**  |  bir sonraki komutun adresini $ra registerında sakla ve label ın adresine dallan
| **RTL**       |  Reg(31) <- PC + 4; + 
		   PC <- PC[31:28] \|\| Imm26 \|\|  00;
|====================

.BZ komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  011000 iiiiiiiiiiiiiiiiiiiiiiiiii
| **Komut**     |  bz label
| **Açıklama**  |  z = 1 ise label ın adresine dallan
| **RTL**       |  if(Z = 1) { + 
           		PC <- PC[31:28] \|\| Imm26 \|\|  00; + 
           } + 
           else { + 
           		PC <- PC + 4; + 
           }
|====================

.BN komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  011001 iiiiiiiiiiiiiiiiiiiiiiiiii
| **Komut**     |  bn label
| **Açıklama**  |  z = 0 ise label ın adresine dallan
| **RTL**       |  if(Z = 0) { + 
           		PC <- PC[31:28] \|\| Imm26 \|\|  00; + 
           } + 
           else { + 
           		PC <- PC + 4; + 
           }
|====================

.BALZ komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  011010 iiiiiiiiiiiiiiiiiiiiiiiiii
| **Komut**     |  balz label
| **Açıklama**  |  z = 1 ise bir sonraki komutun adresini $ra registerında sakla ve label ın adresine dallan
| **RTL**       |  if(Z = 1) { + 
           		Reg(31) <- PC + 4; + 
		   		PC <- PC[31:28] \|\| Imm26 \|\|  00; + 
           } + 
           else { + 
           		PC <- PC + 4; + 
           }
|====================

.BALN komutu
[width="100%",options="footer"]
|====================
| **Binary**    |  011011 iiiiiiiiiiiiiiiiiiiiiiiiii
| **Komut**     |  baln label
| **Açıklama**  |  z = 0 ise bir sonraki komutun adresini $ra registerında sakla ve label ın adresine dallan
| **RTL**       |  if(Z = 0) { + 
           		Reg(31) <- PC + 4; + 
		   		PC <- PC[31:28] \|\| Imm26 \|\|  00; + 
           } + 
           else { + 
           		PC <- PC + 4; + 
           }
|====================
